/*
    C 语言 typedef 的用法
    起别名的目的不是为了提高程序运行效率，而是为了编码方便。例如有一个结构体的名字是 stu，要想定义一个结
    构体变量就得这样写：
    struct stu stu1;
    struct 看起来就是多余的，但不写又会报错。如果为 struct stu 起了一个别名 STU，书写起来就简单了：
    STU stu1;
    这种写法更加简练，意义也非常明确，不管是在标准头文件中还是以后的编程实践中，都会大量使用这种别名。
    使用关键字 typedef 可以为类型起一个新的别名。 typedef 的用法一般为：
    typedef oldName newName;
    oldName 是类型原来的名字， newName 是类型新的名字。例如：
        typedef int INTEGER;
        INTEGER a, b;
        a = 1;
        b = 2;

*/
/*
    typedef 还可以给数组、 指针、结构体等类型定义别名。先来看一个给数组类型定义别名的例子：
    typedef char ARRAY20[20];
    表示 ARRAY20 是类型 char [20]的别名。它是一个长度为 20 的数组类型。接着可以用 ARRAY20 定义数组：
    ARRAY20 a1, a2, s1, s2;
    它等价于：
    char a1[20], a2[20], s1[20], s2[20];
    注意，数组也是有类型的。例如 char a1[20];定义了一个数组 a1，它的类型就是 char [20]
*/
/*
    再如，为指针类型定义别名：
        typedef int (*PTR_TO_ARR)[4];
    表示 PTR_TO_ARR 是类型 int * [4]的别名，它是一个二维数组指针类型。接着可以使用 PTR_TO_ARR 定义二维数
    组指针：
    PTR_TO_ARR p1, p2;
    按照类似的写法，还可以为函数指针类型定义别名：
    typedef int (*PTR_TO_FUNC)(int, int);
    PTR_TO_FUNC pfunc;
    需要强调的是， typedef 是赋予现有类型一个新的名字，而不是创建新的类型。为了“见名知意”，请尽量使用含
    义明确的标识符，并且尽量大写。
*/
/*
    typedef 和 #define 的区别
    1) 可以使用其他类型说明符对宏类型名进行扩展，但对 typedef 所定义的类型名却不能这样做。如下所示：
    #define INTERGE int
    unsigned INTERGE n; //没问题
    typedef int INTERGE;
    unsigned INTERGE n; //错误，不能在 INTERGE 前面添加 unsigned

    2) 在连续定义几个变量的时候， typedef 能够保证定义的所有变量均为同一类型，而 #define 则无法保证。例如：
        #define PTR_INT int *
        PTR_INT p1, p2;
    经过宏替换以后，第二行变为：
        int *p1, p2;
    这使得 p1、 p2 成为不同的类型： p1 是指向 int 类型的指针， p2 是 int 类型。
    相反，在下面的代码中：
        typedef int * PTR_INT
        PTR_INT p1, p2;
    p1、 p2 类型相同，它们都是指向 int 类型的指针。
*/
/*
    C 语言 const 的用法
    const int MaxNum = 100; //班级的最大人数
    这样 MaxNum 的值就不能被修改了，任何对 MaxNum 赋值的行为都将引发错误：
    MaxNum = 90; //错误，试图向 const 变量写入数据
    我们经常将 const 变量称为常量（Constant） 。创建常量的格式通常为：
    const type name = value;
    const 和 type 都是用来修饰变量的，它们的位置可以互换，也就是将 type 放在 const 前面：
    type const name = value;
    但我们通常采用第一种方式，不采用第二种方式。另外建议将常量名的首字母大写，以提醒程序员这是个常量。
*/
/*
    const 和指针
    const 也可以和指针变量一起使用，这样可以限制指针变量本身，也可以限制指针指向的数据。 const 和指针一起
    使用会有几种不同的顺序，如下所示：
        1. const int *p1;
        2. int const *p2;
        3. int * const p3;
    在最后一种情况下，指针是只读的，也就是 p3 本身的值不能被修改；在前面两种情况下，指针所指向的数据是只
    读的，也就是 p1、 p2 本身的值可以修改（指向不同的数据），但它们指向的数据不能被修改。
    当然，指针本身和它指向的数据都有可能是只读的，下面的两种写法能够做到这一点：
        1. const int * const p4;
        2. int const * const p5;
    const 和指针结合的写法多少有点让初学者摸不着头脑，大家可以这样来记忆： const 离变量名近就是用来修饰指
    针变量的，离变量名远就是用来修饰指针指向的数据，如果近的和远的都有，那么就同时修饰指针变量以及它指向
    的数据。
*/
/*
    const 和函数形参
    在 C 语言中，单独定义 const 变量没有明显的优势，完全可以使用#define 命令代替。 const 通常用在函数形参中，
    如果形参是一个指针，为了防止在函数内部修改指针指向的数据，就可以用 const 来限制。
*/

/*
    const 和非 const 类型转换
    当一个指针变量 str1 被 const 限制时，并且类似 const char *str1 这种形式，说明指针指向的数据不能被修改；如
    果将 str1 赋值给另外一个未被 const 修饰的指针变量 str2，就有可能发生危险。因为通过 str1 不能修改数据，
    而赋值后通过 str2 能够修改数据了，意义发生了转变，所以编译器不提倡这种行为，会给出错误或警告。
    也就是说， const char *和 char *是不同的类型，不能将 const char *类型的数据赋值给 char *类型的变量。但反过来
    是可以的，编译器允许将 char *类型的数据赋值给 const char *类型的变量。
    这种限制很容易理解， char *指向的数据有读取和写入权限，而 const char *指向的数据只有读取权限，降低数据的
    权限不会带来任何问题，但提升数据的权限就有可能发生危险。
    C 语言标准库中很多函数的参数都被 const 限制了，但我们在以前的编码过程中并没有注意这个问题，经常将非
    const 类型的数据传递给 const 类型的形参，这样做从未引发任何副作用，原因就是上面讲到的，将非 const 类型
    转换为 const 类型是允许的
*/

/*
    C 语言随机数： rand()和 srand()函数
    在 C 语言中，我们一般使用 <stdlib.h> 头文件中的 rand() 函数来生成随机数，它的用法为：
    int rand (void);
    void 表示不需要传递参数。
    C 语言中还有一个 random() 函数可以获取随机数，但是 random() 不是标准函数，不能在 VC/VS 等编译器通过，
    所以比较少用。
    rand() 会随机生成一个位于 0 ~ RAND_MAX 之间的整数。
    RAND_MAX 是 <stdlib.h> 头文件中的一个宏，它用来指明 rand() 所能返回的随机数的最大值。 C 语言标准并没
    有规定 RAND_MAX 的具体数值，只是规定它的值至少为 32767。在实际编程中，我们也不需要知道 RAND_MAX
    的具体值，把它当做一个很大的数来对待即可。
*/

/*
    重新播种
    我们可以通过 srand() 函数来重新“播种”，这样种子就会发生改变。 srand() 的用法为：
    void srand (unsigned int seed);
    它需要一个 unsigned int 类型的参数。在实际开发中，我们可以用时间作为参数，只要每次播种的时间不同，那么
    生成的种子就不同，最终的随机数也就不同。
    使用 <time.h> 头文件中的 time() 函数即可得到当前的时间（精确到秒），就像下面这样：
    srand((unsigned)time(NULL));
*/

/*
    生成一定范围内的随机数
    在实际开发中，我们往往需要一定范围内的随机数，过大或者过小都不符合要求，那么，如何产生一定范围的随机
    数呢？我们可以利用取模的方法：
        int a = rand() % 10; //产生 0~9 的随机数，注意 10 会被整除
    如果要规定上下限：
        int a = rand() % 51 + 13; //产生 13~63 的随机数
    分析：取模即取余， rand()%51+13 我们可以看成两部分： rand()%51 是产生 0~50 的随机数，后面+13 保证 a 最小
    只能是 13，最大就是 50+13=63。
*/