#include<stdio.h>
#include<stdlib.h> //%g小数的输出
#include<windows.h>

int main()
{
    puts("=====================================================\n");
    //合法的二进制
    /* int q = 0b101; //换算成十进制为 5
    int w = -0b110010; //换算成十进制为 -50
    int r = 0B100001; //换算成十进制为 33 */
    /*
        标准的 C 语言并不支持上面的二进制写法，只是有些编译器自己进行了扩展，才支持二进制数字。
        换句话说，并不是所有的编译器都支持二进制数字，只有一部分编译器支持，并且跟编译器的版本有关系。
    */
    

    //八进制由 0~7 八个数字组成，使用时必须以 0 开头（注意是数字 0，不是字母 o）
    //合法的八进制数
    /* int a = 015; //换算成十进制为 13
    int b = -0101; //换算成十进制为 -65
    int c = 0177777; //换算成十进制为 65535
    //合法的十六进制
    int d = 0X2A; //换算成十进制为 42
    int e = -0XA0; //换算成十进制为 -160
    int f = 0xffff; //换算成十进制为 65535
    //十进制
    int g = 10; //换算为十六进制为A */

    //注意，虽然部分编译器支持二进制数字的表示，但是却不能使用 printf 函数输出二进制，这一点比较遗憾。 
    /**
     * 区分不同进制数字的一个简单办法就是，在输出时带上特定的前缀。在格式控制符中加上#即可输出前缀，例
     * 如 %#x、 %#o、 %#lX、 %#ho 等
     */
    /* printf("q = %d\n", q);
    printf("a = %d, b = %d, c = %d\n", a, b, c);
    printf("d = %d, e = %d, f = %#x, g = %#X, g = %#o\n", d, e, f, g, g); */

    /**
     * 
     * C 语言允许我们这样做，如果不希望设置符号位，可以在数据类型前面加上 unsigned 关键字，
     * 这样， short、 int、 long 中就没有符号位了，所有的位都用来表示数值，正数的取值范围更大了。这也意味着，使
     * 用了 unsigned 后只能表示正数，不能再表示负数了
     * 请读者注意一个小细节，如果是 unsigned int 类型，那么可以省略 int ，只写 unsigned
     */ 
    /* unsigned short x = 12;
    unsigned y = 1002;
    unsigned long z = 9892320; */
    // puts("===================================\n");

    /*
        %f 以十进制形式输出 float 类型；
        %lf 以十进制形式输出 double 类型；
        %e 以指数形式输出 float 类型，输出结果中的 e 小写；
        %E 以指数形式输出 float 类型，输出结果中的 E 大写；
        %le 以指数形式输出 double 类型，输出结果中的 e 小写；
        %lE 以指数形式输出 double 类型，输出结果中的 E 大写。
        指数形式输出中，小数点左边只放一位
    */
    /* float ab = 0.302;
    float bc = 128.101;
    double cd = 123;
    float de = 112.64E3;
    double ef = 0.7623e-2;
    float fg = 1.23002398;
    printf("ab=%e \nbc=%f \ncd=%lf \nde=%lE \nef=%lf \nfg=%f\n", ab, bc, cd, de, ef, fg); */
    // puts("===================================\n");
    /*
        另外，小数还有一种更加智能的输出方式，就是使用%g。 %g 会对比小数的十进制形式和指数形式，以最短的方式
        来输出小数，让输出结果更加简练。所谓最短，就是输出结果占用最少的字符。
    */
    /* float a1 = 0.00001;
    float b2 = 30000000;
    float c3 = 12.84;
    float d4 = 1.229338455; */
    // printf("a1=%g \nb2=%g \nc3=%g \nd4=%g\n", a1, b2, c3, d4);

    /*
        在 C 语言中，整数和小数之间可以相互赋值：
        将一个整数赋值给小数类型，在小数点后面加 0 就可以，加几个都无所谓。
        将一个小数赋值给整数类型，就得把小数部分丢掉，只能取整数部分，这会改变数字本来的值。注意是直接丢
        掉小数部分，而不是按照四舍五入取近似值。
    */


    //错误的写法
    // char vb = '中'; //char 类型不能包含 ASCII 编码之外的字符
    // char vs = 'Ａ '; //A 是一个全角字符
    // char z = "t"; //字符类型应该由单引号包围
    /*
        输出 char 类型的字符有两种方法，分别是：
        使用专门的字符输出函数 putchar；
        使用通用的格式化输出函数 printf， char 对应的格式控制符是%c
        putchar 函数每次只能输出一个字符，输出多个字符需要调用多次。
    */
    // putchar(vb);
    // putchar(vs);

    /*
        我们知道，计算机在存储字符时并不是真的要存储字符实体，而是存储该字符在字符集中的编号（也可以叫编码值）。
        对于 char 类型来说，它实际上存储的就是字符的 ASCII 码。
    */
    /* char i = 'E';
    char o = 70;
    int u = 71;
    int p = 'H';    
    printf("i: %c, %d\n", i, i);
    printf("o: %c, %d\n", o, o);
    printf("u: %c, %d\n", u, u);
    printf("p: %c, %d\n", p, p); */

    /*
        转义字符的初衷是用于 ASCII 编码，所以它的取值范围有限：
        八进制形式的转义字符最多后跟三个数字，也即\ddd，最大取值是\177；
        十六进制形式的转义字符最多后跟两个数字，也即\xdd，最大取值是\7f
    */


    /* int xm, xh;
    puts("请输入两个整数:"); //改GBK编码，有可能乱码
    scanf("%d %d", &xm, &xh); //从控制台读取数据并分别赋值给a和b
    printf("result=%d\n", xm / xh); */

    /*
        在 printf 中， % 是格式控制符的开头，是一个特殊的字符，
        不能直接输出；要想输出 %，必须在它的前面再加一个 %，
    */
    /*
         取余，也就是求余数，使用的运算符是 %。 C 语言中的取余运算只能针对整数，也就是说， % 的两边都必须是整数，
         不能出现小数，否则编译器会报错。
         另外，余数可以是正数也可以是负数，由 % 左边的整数决定：
         如果 % 左边是正数，那么余数也是正数；
         如果 % 左边是负数，那么余数也是负数。
    */
    // printf("100%%12=%d\n100%%-12=%d\n", 100%12, 100%-12);

    /*
        %-9d 中， d 表示以十进制输出， 9 表示最少占 9 个字符的宽度，宽度不足以空格补齐， 
        -表示左对齐。综合起来， 
        %-9d 表示以十进制输出，左对齐，宽度最小为 9 个字符。大家可以亲自试试%9d 的输出效果。
    */
    /* int a1 = 20, a2 = 345, a3 = 700, a4 = 22;
    int b1 = 56720, b2 = 9999, b3 = 20098, b4 = 2;
    int c1 = 233, c2 = 205, c3 = 1, c4 = 6666;
    int d1 = 34, d2 = 0, d3 = 23, d4 = 23006783;
    printf("%-9d %-9d %-9d %-9d\n", a1, a2, a3, a4);
    printf("%-9d %-9d %-9d %-9d\n", b1, b2, b3, b4);
    printf("%-9d %-9d %-9d %-9d\n", c1, c2, c3, c4);
    printf("%-9d %-9d %-9d %-9d\n", d1, d2, d3, d4); */

    //Sleep()函数
    int count = 60;
    for (int i = count; i > 0; i--)
    {
        printf("%d\n", i);
        Sleep(1000); //对应头文件#include<windows.h>
    }
    printf("火箭发射↑\n");
    
    














    return 0;
}