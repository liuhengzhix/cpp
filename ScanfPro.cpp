#include <stdio.h>

int main()
{
    puts("===============================================\n");
    /*
        指定读取长度
        其实，scanf() 也有类似的用法，也可以在格式控制符的中间加一个数字，用来表示读取数据的最大长度，例如：
        %2d 表示最多读取两位整数；
        %10s 表示读取的字符串的最大长度为 10，或者说，最多读取 10 个字符。
    */
    /* int n;
    float f;
    char str[23];
    scanf("%2d", &n);
    scanf("%*[^\n]"); scanf("%*c"); //清空缓冲区
    scanf("%5f", &f);
    scanf("%*[^\n]"); scanf("%*c"); //清空缓冲区
    scanf("%22s", str);
    printf("n=%d, f=%g, str=%s\n", n, f, str); */

    /*
        %s 控制符会匹配除空白符以外的所有字符，它有两个缺点：
        %s 不能读取特定的字符，比如只想读取小写字母，或者十进制数字等， %s 就无能为力；
        %s 读取到的字符串中不能包含空白符，有些情况会比较尴尬，例如，无法将多个单词存放到一个字符串中，因
        为单词之间就是以空格为分隔的， %s 遇到空格就读取结束了。
        要想解决以上问题，可以使用 scanf() 的另外一种字符匹配方式，就是%[xxx]， [ ]包围起来的是需要读取的字
        符集合。例如， %[abcd]表示只读取字符 abcd，遇到其它的字符就读取结束；注意，这里并不强调字符的顺序，
        只要字符在 abcd 范围内都可以匹配成功，所以你可以输入 abcd、 dcba、 ccdc、 bdcca 等。
    */
    /*
        为了简化字符集合的写法， scanf() 支持使用连字符-来表示一个范围内的字符，例如 %[a-z]、 %[0-9] 等。
        %[a-zA-Z]表示读取大写字母和小写字母，也即所有英文字母；
        %[a-z-A-Z0-9]表示读取所有的英文字母和十进制数字；
        %[0-9a-f]表示读取十六进制数字。
    */
    /*
        不匹配某些字符
        C 语言的开发者们早就考虑到这个问题了， scanf() 允许我们在%[ ]中直接指定某些不能匹配的字符，具体方法
        就是在不匹配的字符前面加上^，例如：
        %[^\n]表示匹配除换行符以外的所有字符，遇到换行符就停止读取；
        %[^0-9]表示匹配除十进制数字以外的所有字符，遇到十进制数字就停止读取。
    */
    /* char str1[30];
    char str2[30]; */

    // scanf("%[abcd]", str1); //匹配特定字符串
    /*
        它的作用是读取一行字符串，和 gets() 的功能一模一样。你看， scanf() 也能读取带空格
        的字符串呀，谁说 scanf() 不能完全取代 gets()，这明显是错误的说法。
    */
    /* scanf("%[^\n]", str2);
    printf("%s\n", str1); */

    /*
        丢弃读取到的字符
        在前面的代码中，每个格式控制符都要对应一个变量，把读取到的数据放入对应的变量中。其实你也可以不这
        样做， scanf() 允许把读取到的数据直接丢弃，不往变量中存放，具体方法就是在 % 后面加一个*，例如：
        %*d 表示读取一个整数并丢弃；
        %*[a-z]表示读取小写字母并丢弃；
        %*[^\n]表示将换行符以外的字符全部丢弃。
    */
    /* int m;
    char str[30];
    scanf("%*d %d", &m);
    //scanf("%*[a-z]"); 代码中没空格而输入时有空格12 45 lmn ADG则str=lmn ADG; 也就是说加一个空格会让这条语句失效
    scanf("%*[a-z]");
    scanf("%[^\n]", str);
    printf("n=%d, str=%s\n", m, str); */
    /*
        scanf() 控制字符串的完整写法为
        %{*} {width} type
        其中， { } 表示可有可无。各个部分的具体含义是：
        type 表示读取什么类型的数据，例如 %d、 %s、 %[a-z]、 %[^\n] 等； type 必须有。
        width 表示最大读取宽度，可有可无。
        *表示丢弃读取到的数据，可有可无。
    */

    return 0;
}